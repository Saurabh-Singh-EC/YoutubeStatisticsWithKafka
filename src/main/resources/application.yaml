spring:
  jmx:
    enabled: false
  kafka:
    bootstrap-servers: <DEFAULT_IP>:9092
    listener:
      ack-mode: manual_immediate
      type: batch
    producer:
      keySerializer: io.confluent.kafka.serializers.KafkaAvroSerializer
      valueSerializer: io.confluent.kafka.serializers.KafkaAvroSerializer
      properties:
        schema.registry.url: http://<DEFAULT_IP>:8081
    streams:
      application-id: dev.codeWithSrb.v1
      properties:
        default:
          deserialization.exception.handler: org.apache.kafka.streams.errors.LogAndContinueExceptionHandler
          key.serde: io.confluent.kafka.streams.serdes.avro.SpecificAvroSerde
          value.serde: io.confluent.kafka.streams.serdes.avro.SpecificAvroSerde
        processing-guarantee: at_least_once
        schema.registry-url: http://<DEFAULT_IP>:8081
    consumer:
      key-deserializer: io.confluent.kafka.serializers.KafkaAvroDeserializer
      value-deserializer: io.confluent.kafka.serializers.KafkaAvroDeserializer
      auto-offset-reset: earliest
      enable-auto-commit: false
      max-poll-records: 500
      fetch-max-wait: 5000
      fetch-min-size: 1000000
      isolation-level: read_committed
      properties:
        specific.avro.reader: true
        schema.registry.url: http://<DEFAULT_IP>:8081
      topic: dev.codeWithSrb.output.test
      group-id: dev.codeWithSrb.con.v1

server:
  port: 9777

kafka:
  topics:
    input: dev.codeWithSrb.input.test
    output: dev.codeWithSrb.output.test
    error: dev.codeWithSrb.error.test
